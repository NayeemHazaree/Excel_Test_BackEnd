// <auto-generated />
using System;
using API.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230707182906_addEpilepsyToPatientTable")]
    partial class addEpilepsyToPatientTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.DiseaseInformation", b =>
                {
                    b.Property<Guid>("DiseaseInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiseaseInformationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiseaseInformationId");

                    b.ToTable("DiseaseInformation");
                });

            modelBuilder.Entity("API.Models.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseInformation_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Epilepsy")
                        .HasColumnType("bit");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("DiseaseInformation_Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("API.Models.Patient", b =>
                {
                    b.HasOne("API.Models.DiseaseInformation", "DiseaseInformation")
                        .WithMany()
                        .HasForeignKey("DiseaseInformation_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
